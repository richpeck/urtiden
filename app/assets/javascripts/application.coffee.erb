#########################################################
#########################################################
##   ___              _ _           _   _              ##
##  / _ \            | (_)         | | (_)             ##
## / /_\ \_ __  _ __ | |_  ___ __ _| |_ _  ___  _ __   ##
## |  _  | '_ \| '_ \| | |/ __/ _` | __| |/ _ \| '_ \  ##
## | | | | |_) | |_) | | | (_| (_| | |_| | (_) | | | | ##
## \_| |_/ .__/| .__/|_|_|\___\__,_|\__|_|\___/|_| |_| ##
##       | |   | |                                     ##
##       |_|   |_|                                     ##
##                                                     ##
#########################################################
#########################################################

## Libs ##
#= require jquery
#= require jquery_ujs
#= require turbolinks
#= require bootstrap

#########################################################
#########################################################

## Extras ##
#= require strftime
#= require_tree ./extras

#########################################################
#########################################################

## Buttons ##
## Triggers when top buttons are clicked ##
$(document).on "click", ".toolbar a.btn", (e) ->
  $(".toolbar .btn").addClass("disabled")

#########################################################
#########################################################

## Sync ##
## Since this is Ajax, we can call the ajaxbefore method ##
$(document).on("ajax:beforeSend", "a.sync", () ->
  $(this).addClass("disabled")
  $("#products_processing").show()

## Success ##
).on("ajax:success", "a.sync", (event, data, status, xhr) ->
  product = JSON.parse(xhr.responseText)
  synced  = strftime('%b %d %Y (%H:%M:%S %Z)', product["synced_at"]) # strftime kept in vendor/assets/javascripts/strftime.js
  $(this).closest("tr").find("td.synced_at").html(synced)

## Error ##
).on("ajax:error", "a.sync", (event, response, status, xhr) ->
  alert "❌ Error"

## Complete ##
).on "ajax:complete", "a.sync", () ->
  $(this).removeClass("disabled")
  $("#products_processing").hide()

#########################################################
#########################################################

## Ready ##
## Triggers when the DOM is ready to be manipulated (IE is 100% effective) ##
$(document).ready ->

  ## Sync ##
  ## Due to the sync value being set on refresh, we need to manage the buttons from document.ready ##
  sync_queue = $("body").data("sync-queue")

  

  ###################################
  ###################################

  ## Buttons ##
  callback = (mutations) ->

    ## Catches any Mutations that happen ##
    mutations.forEach (mutation) ->

      ## Attributes ##
      ## Allows us to differentate depending on the different attributes of the target node ##
      if (mutation.type == 'attributes' && mutation.attributeName == 'data-products-count') ## products-count has been updated

          ## Count ##
          count = $(mutation.target).data("products-count")

          ## Action ##
          if count <= 0
            $("#sync_all").addClass("disabled")
            $("#delete_all").addClass("disabled")
          else
            $("#sync_all").removeClass("disabled")
            $("#delete_all").removeClass("disabled")

  ## Mutation Observer ##
  ## Allows us to determine if the buttons should show or not ##
  targetNode = document.getElementsByTagName("body")[0]
  config     = { attributes: true }
  observer   = new MutationObserver(callback)

  ## Go ##
  observer.observe(targetNode, config)

#########################################################
#########################################################
